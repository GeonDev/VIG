<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper"> 	
 	
	<resultMap id="userSelectMap" type="user">
		<result property="userCode" 		column="user_code" 			jdbcType="VARCHAR"/>
		<result property="userName"			column="user_name" 			jdbcType="VARCHAR" />
		<result property="password" 		column="password" 			jdbcType="VARCHAR" />
		<result property="role" 			column="role" 				jdbcType="VARCHAR" />
		<result property="profileImg" 		column="profile_img" 		jdbcType="VARCHAR" />
		<result property="selfIntroduce" 	column="self_introduce" 	jdbcType="VARCHAR" />
		<result property="sex" 				column="sex" 				jdbcType="VARCHAR" />
		<result property="birth" 			column="birth" 				jdbcType="NUMERIC" />
		<result property="state" 			column="state" 				jdbcType="NUMERIC" />
		<result property="googleId" 		column="google_id" 			jdbcType="VARCHAR" />
		<result property="account" 			column="account" 			jdbcType="VARCHAR" />
		<result property="primeCount" 		column="prime_count" 		jdbcType="NUMERIC" />
		<result property="email" 			column="email" 				jdbcType="VARCHAR" />
		<result property="regDate" 			column="reg_date" 			jdbcType="DATE" />
		<result property="banDate" 			column="ban_date" 			jdbcType="DATE" />			
	</resultMap>	 
	
	
		<!-- SQL : INSERT -->
	<insert	id="addUser" parameterType="user" >
	 	INSERT
		INTO users('user_code' , user_name , password , role , profile_img, self_introduce, sex, birth, state, google_id, account, prime_count, email, varied_code, reg_date) 
		VALUES (user_code, #{userName}, #{password:VARCHAR}, #{role:VARCHAR}, #{profileImg:VARCHAR}, #{selfIntroduce:VARCHAR}, #{sex:VARCHAR}, #{birth:NUMERIC}, #{state:NUMERIC}, #{googleId:VARCHAR}, #{account:VARCHAR}, #{primeCount:NUMERIC}, #{email:VARCHAR}, NOW())
	 </insert>
	 
	 
	 
	 <!-- #{searchType}에 따라 비즈니스, 일반 계정만 조회 하거나 전체를 조회함  -->
	 <select id="getUserListFromName" parameterType = "search" resultMap="userSelectMap">
	 	SELECT temp.* FROM
	 	(SELECT ROW_NUMBER() OVER(ORDER BY users.user_code) num, users.*
	 	FROM users
	 	<where>
		 	<if test="keyword != ''">
		 		user_name LIKE CONCAT('%',#{keyword},'%')
		 	</if>	 	
		 	<if test="#{searchType} == 1">
		 		role in('user','business') 
		 	</if>		 	
	 	</where> 	
	 	)temp
	 	WHERE num BETWEEN #{startRowNum} AND #{endRowNum}	
	 </select>
	 
	 
	 <select id="getUserOne" parameterType = "String" resultMap="userSelectMap">
	 	SELECT *
	 	FROM users
	 	WHERE user_code = #{value}	
	 </select>
		 	 
	 	 
	  <select id="getLastUserNum" parameterType = "int" resultType="int">
	 	SELECT COUNT(user_code) FROM users	 	
	 </select>
	 
	 
	 <select id="getAutoUserName" parameterType="String" resultType="String">
	 	SELECT temp.user_name FROM
	 	(SELECT ROW_NUMBER() OVER(ORDER BY users.user_code) num, users.user_name FROM users
	 	WHERE users.user_name LIKE CONCAT('%',#{value},'%')
	 	AND users.role in('user','business') )temp
	    WHERE num BETWEEN 1 AND 5	 
	 </select>
	 
	 
	 <update	id="updateUser"	parameterType="user" >
	   	UPDATE users
	   		SET 
	   		user_name 	= #{userName} ,
			password	= #{password},
			self_introduce 	= #{selfIntroduce} ,
			account	=	#{account} 			
	   	WHERE user_code = #{userCode}
	 </update>
	 
	 
	 <delete id="deleteUser" parameterType="String">
	 	DELETE 
	 	FROM users 
	 	WHERE user_code = #{value}
	 </delete>
	 
	<!--   
	 <update id="deleteUser" parameterType="String">
	 	UPDATE users
	    SET 
	    nickname = 'x',
	    email = 'x'
	    WHERE user_code = #{userCode}
	 </update>
	-->
	 
</mapper>


