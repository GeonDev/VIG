<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="FeedMapper"> 	
 	
	<resultMap id="FeedSelectMap" type="feed">
		<result property="feedId" 				column="feed_id" 				jdbcType="NUMERIC"/>
		<result property="feedTitle"			column="feed_title" 			jdbcType="VARCHAR" />
		<result property="feedExplanation" 		column="feed_explanation" 		jdbcType="VARCHAR" />
		<result property="feedRegDate" 			column="feed_reg_date" 			jdbcType="DATE" />
		<result property="feedEditDate" 		column="feed_edit_date" 		jdbcType="DATE" />
		<result property="feedViewCount" 		column="feed_view_count" 		jdbcType="NUMERIC" />
		<result property="feedIsPrime" 			column="feed_is_prime" 			jdbcType="NUMERIC" />		
		<result property="feedUseGears" 		column="feed_use_gears" 		jdbcType="VARCHAR" />
		<result property="feedState" 			column="feed_state" 			jdbcType="NUMERIC" />
		<result property="primeFeedViewCount" 	column="prime_feed_view_count" 	jdbcType="NUMERIC" />
		<result property="commentRange" 		column="comment_range" 			jdbcType="NUMERIC" />					
		
		<association property="writer"         column="user_code"    javaType="user"      select="setWriter"/>		
		<association property="feedCategory"   column="category_id"  javaType="category"  select="setCategory"/>		
			
		<collection property="images" 		column="feed_id" 	javaType="list" 	ofType="image" 		select="setFeedImages"/>
		<collection property="likes" 		column="feed_id" 	javaType="list" 	ofType="joiner" 	select="setLikeUserlist"/>
		<collection property="coworkers" 	column="feed_id" 	javaType="list" 	ofType="joiner" 	select="setCoworkUserlist"/>
		<collection property="comments" 	column="feed_id" 	javaType="list" 	ofType="comment"	select="setCommentlist"/>
		<collection property="keywords" 	column="feed_id" 	javaType="list" 	ofType="keyword"	select="setKeywordlist"/>	
			
	</resultMap>		
	
		<select id="setWriter" parameterType="string" resultMap="UserMapper.userSelectMap" >
			SELECT * FROM users
			WHERE user_code = #{value}		
		</select>	
		
		<select id="setFeedImages" parameterType="int" resultMap="ImageMapper.ImageSelectMap" >
			SELECT * FROM images
			WHERE feed_id = #{value}		
		</select>
		
		<select id="setLikeUserlist" parameterType="int" resultMap="JoinerMapper.joinerSelectMap" >
			SELECT * FROM joiner
			WHERE feed_id = #{value} AND is_like = 1					
		</select>
		
		<select id="setCoworkUserlist" parameterType="int" resultMap="JoinerMapper.joinerSelectMap" >
			SELECT * FROM joiner
			WHERE feed_id = #{value} AND is_like = 0					
		</select>
		
		<select id="setCommentlist" parameterType="int" resultMap="CommentMapper.commentSelectMap" >
			SELECT * FROM comments
			WHERE feed_id = #{value}					
		</select>
		
		<select id="setCategory"  parameterType="int"  resultMap="CategoryMapper.categorySelectMap" >
			SELECT * FROM categories
			WHERE category_id = #{value}					
		</select>
		
		<select id="setKeywordlist"  parameterType="int"  resultMap="KeywordMapper.keywordSelectMap" >
			SELECT keywords.* FROM images, keywords
			WHERE images.image_id = keywords.image_id
			AND images.is_thumbnail = 1
			AND images.feed_id = #{value}
								
		</select>
		
		
		<!-- 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 -->
		
		<select id = "getlastFeedId" resultType="int">
			SELECT MAX(feed_id) FROM feeds
		</select>		
		
		<insert id ="insertFeed" parameterType="feed">
			Insert INTO feeds(feed_id, user_code, feed_title, feed_explanation, feed_reg_date, feed_is_prime, category_id, feed_use_gears, feed_state, comment_range  )
			VALUES(feed_id, #{writer.userCode}, #{feedTitle}, #{feedExplanation:VARCHAR}, NOW(), #{feedIsPrime:NUMERIC}, #{feedCategory.categoryId:NUMERIC}, #{feedUseGears:VARCHAR}, #{feedState:NUMERIC}, #{commentRange:NUMERIC})		
		</insert>
		
		<select id="getFeed" parameterType="int" resultMap="FeedSelectMap">
			SELECT * FROM feeds
			WHERE feed_id = #{value}
		</select>		
		
		
		<!-- 특정유저가 작성한 피드를 모두 불러온다.  -->
		<select id="getMyFeedList" parameterType="search" resultMap="FeedSelectMap">
			SELECT * FROM
			(SELECT ROW_NUMBER() OVER(ORDER BY feeds.feed_id DESC) num, feeds.* FROM feeds
			WHERE user_code = #{keyword} AND feed_state = 0						
			)temp WHERE num BETWEEN #{startRowNum} AND #{endRowNum}
		</select>
		
		
		<!-- 우선 노출시 출력한 프라임 피드를 불러온다. (노출이 가장 작은 프라임피드) -->		
		<select id ="getPrimeFeed" parameterType="search" resultMap="FeedSelectMap">
			SELECT feeds.* FROM feeds, images, keywords, users
			WHERE feeds.feed_id = images.feed_id				
			AND images.image_id = keywords.image_id
			AND feeds.user_code = users.user_code
			AND users.prime_count > 0			
			AND feeds.feed_is_prime = 1 
			AND feeds.feed_state = 0
			<if test="keyword !=''">
			AND UPPER(keywords.keyword_en) LIKE CONCAT('%',#{keyword},'%')				
			</if>
			<if test="searchType != 0">
			AND	feeds.category_id = #{searchType}	
			</if>
			GROUP BY feeds.feed_id
			ORDER BY feeds.prime_feed_view_count
			limit 3	
		</select>
		
		
		<!-- 타이틀을 기준으로 우선 노출시 출력한 프라임 피드를 불러온다. (노출이 가장 작은 프라임피드) -->
		<select id ="getPrimeFeedTitle" parameterType="search" resultMap="FeedSelectMap">
			SELECT feeds.* FROM feeds, users
			WHERE feeds.user_code = users.user_code
			AND feeds.feed_is_prime = 1 
			AND feeds.feed_state = 0
			AND users.prime_count > 0
			<if test="keyword !=''">
			AND feeds.feed_title LIKE CONCAT('%',#{keyword},'%')				
			</if>
			<if test="searchType != 0">
			AND	feeds.category_id = #{searchType}	
			</if>		
			ORDER BY feeds.prime_feed_view_count
			limit 3 	
		</select>
		
		
		<!-- 이벤트 참여 피드 조회용 -->
		<select id ="getFeedListOnlyTag" parameterType="string" resultMap="FeedSelectMap">
			SELECT feeds.* FROM feeds, images, keywords
			WHERE feeds.feed_id = images.feed_id
			AND images.image_id = keywords.image_id
			AND feed_state = 0
			AND FIND_IN_SET(keywords.keyword_origin, #{value})
			GROUP BY feeds.feed_id			
		</select>
		
		
		<select id="getTempFeed" parameterType="string" resultMap="FeedSelectMap">
			SELECT * FROM feeds
			WHERE user_code = #{value} AND feed_state = 1
		</select>
		
		<delete id="deleteFeed" parameterType="int">
		 	DELETE FROM feeds
		 	WHERE feed_id = #{value}
		</delete>
						
		<select id="getfeedListFromCategory" parameterType="search" resultMap="FeedSelectMap">
			SELECT *  FROM
			(SELECT ROW_NUMBER() OVER(ORDER BY feeds.feed_id) num, feeds.* FROM feeds
			WHERE feeds.feed_state = 0
			<if test="searchType !=''">
			AND	feeds.category_id = #{searchType}
			</if>			
			) temp
			WHERE num BETWEEN #{startRowNum} AND #{endRowNum}		
		</select>
		
		
		<!-- 주어진 키워드에 해당하는 피드를 출력  -->
		<select id="getfeedListFromKeyword" parameterType="search" resultMap="FeedSelectMap">
			SELECT *  FROM
			(SELECT ROW_NUMBER() OVER(ORDER BY feeds.feed_view_count DESC) num, feeds.* FROM feeds, images, keywords
			WHERE feeds.feed_id = images.feed_id
			AND images.image_id = keywords.image_id			
			AND feeds.feed_state = 0
			AND feeds.feed_is_prime = 0
			<if test="keyword !=''">
			AND UPPER(keywords.keyword_en) LIKE CONCAT('%',#{keyword},'%')				
			</if>
			<if test="searchType != 0">
			AND	feeds.category_id = #{searchType}	
			</if>			
			GROUP BY feeds.feed_id) temp
			WHERE num BETWEEN #{startRowNum} AND #{endRowNum}		
		</select>	
		
		<!-- 피드 타이틀에 입력한 키워드를 포함하는지 확인 (OR 연산 속도가 느려서 따로 계산) -->
		<select id="getfeedListFromTitle" parameterType="search" resultMap="FeedSelectMap">
			SELECT *  FROM
			(SELECT ROW_NUMBER() OVER(ORDER BY feeds.feed_view_count DESC) num, feeds.* FROM feeds
			WHERE feeds.feed_state = 0
			AND feeds.feed_is_prime = 0
			<if test="keyword !=''">
			AND feeds.feed_title LIKE CONCAT('%',#{keyword},'%')				
			</if>
			<if test="searchType != 0">
			AND	feeds.category_id = #{searchType}	
			</if>			
			) temp
			WHERE num BETWEEN #{startRowNum} AND #{endRowNum}		
		</select>	
		
				
		<select id="getfeedListFromColor" parameterType="search" resultMap="FeedSelectMap">
			SELECT *  FROM
			(SELECT ROW_NUMBER() OVER(ORDER BY feeds.feed_id) num, feeds.* FROM feeds, images, colors
			WHERE feeds.feed_id = images.feed_id 
			AND images.image_id = colors.image_id
			AND images.is_thumbnail = 1
			AND feeds.feed_state = 0
			AND colors.haxcode = #{keyword}
			<if test="searchType != 0">
			AND	feeds.category_id = #{searchType}	
			</if>
			GROUP BY feeds.feed_id) temp
			WHERE num BETWEEN #{startRowNum} AND #{endRowNum}		
		</select>	
		
		
		<!-- 자동완성용 쿼리문 -->
		<select id ="getfeedTitleList" parameterType="String" resultType="String">
			SELECT feed_title FROM feeds
			WHERE feed_title LIKE CONCAT('%',#{value},'%')
			AND feeds.feed_state = 0 
			LIMIT 5
			
		</select>
		
		<update id ="updatePrimeFeedViewCount" parameterType="feed">
		 	UPDATE feeds
			 SET prime_feed_view_count = #{primeFeedViewCount}
			 WHERE feed_id = #{feedId} 		
		</update>
				
		<!-- 가장 많이 조회한 피드 리스트를 불러온다. (방문유저 세팅용) -->
		<select id="getHightViewFeedList" parameterType="search" resultMap="FeedSelectMap">
			SELECT *  FROM
			(SELECT ROW_NUMBER() OVER(ORDER BY feeds.feed_view_count DESC, feeds.feed_id DESC) num, feeds.* FROM feeds
			WHERE feeds.feed_state = 0 
			) temp
			WHERE num BETWEEN #{startRowNum} AND #{endRowNum}			
		</select>
		
		<update id="updateViewCount" parameterType="int">
			UPDATE feeds set feed_view_count=feed_view_count+1 
			WHERE feed_id=#{value}
		</update>
		
		
		<!-- 내가 좋아요한 피드 리스트를 불러온다. -->
		<select id="getLikedFeedList" parameterType="search" resultMap="FeedSelectMap">
			SELECT * FROM
			(SELECT ROW_NUMBER() OVER(ORDER BY joiner.joiner_id DESC) num, feeds.* FROM feeds, joiner
			WHERE feeds.feed_id = joiner.feed_id
			AND joiner.is_like = 1
			AND joiner.user_code = #{keyword}			
			) temp
			WHERE num BETWEEN #{startRowNum} AND #{endRowNum}		
		</select>
		
		
		
		<!-- 내가 봤던 피드의 키워드를 1개라도 가지고 있는 피드를 불러온다. -->
		<select id="getRecommendFeedList" parameterType="search" resultMap="FeedSelectMap">
			SELECT *  FROM
			(SELECT ROW_NUMBER() OVER(ORDER BY temp.same DESC) num, temp.* FROM
			(SELECT COUNT(feeds.feed_id) same, feeds.* FROM feeds, images, keywords
			WHERE feeds.feed_id = images.feed_id
			AND images.image_id = keywords.image_id	
			AND feeds.feed_state = 0
			AND UPPER(keywords.keyword_en) IN
			<foreach collection="keywords" item="item" open="(" close=")" separator=",">
			 #{item.keywordEn}
			</foreach>
			GROUP BY feeds.feed_id) temp) tab
			WHERE num BETWEEN #{startRowNum} AND #{endRowNum}			
		</select>
		
		
	 
</mapper>


